import{_ as h,c as p,b as i,a as n,e as l,d as e,o as k,r as t}from"./app-DBMheWNY.js";const d={};function r(g,s){const a=t("Mermaid");return k(),p("div",null,[s[0]||(s[0]=i("h2",{id:"概述",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#概述"},[i("span",null,"概述")])],-1)),s[1]||(s[1]=i("p",null,"Android 的 UI 渲染机制是指将应用界面从布局到在屏幕上显示的整个过程。这是 Android 系统中最核心的部分之一，它涉及视图系统、硬件加速渲染以及与 GPU 交互的一系列复杂流程。理解 UI 渲染机制对于开发高性能、流畅的应用界面至关重要，也是解决界面卡顿、闪烁等问题的基础。",-1)),s[2]||(s[2]=i("h2",{id:"渲染流程概览",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#渲染流程概览"},[i("span",null,"渲染流程概览")])],-1)),s[3]||(s[3]=i("p",null,"Android UI 的渲染流程可以概括为以下几个主要阶段：",-1)),n(a,{id:"mermaid-12",code:"eJxLL0osyFAIceFSAALH6FDP57v2P1/R/bRj9tPdux43ND7d0fx0Y8PTST3Pd8942rEtVkFX107BKfrZvBagvEtmcUFOYqVPZnFJLNgAJ7C0c/STHV1P9ix42rEhKDUvJbUoJKMoNTEFosQZrMQl2j0g9OmSlucT2iAGP+tpf7J7CUSJC1iJa/TTCR3POiY8m7Hv+ZJdQLOebux/unMqRAmYKC6pzElVcFRIy8zJsVJOs0wxSzbRKS4pys9OtVJONTAzNjeHcnXLM1NKMqyMCiqQNDpBNSabpCSnWcI1AnVZJBvh0+gM15hmmYyk0STRwtQYn0YXcjW6wv2YZozkx7SkpGQDGBdJIwDcsK/d"}),s[4]||(s[4]=l('<ol><li><strong>测量、布局和绘制</strong>：UI 线程负责测量和布局视图，然后绘制可见内容</li><li><strong>构建渲染树</strong>：将视图层次转换为 DisplayList（渲染指令列表）</li><li><strong>渲染线程处理</strong>：将渲染数据传递给渲染线程</li><li><strong>GPU 处理</strong>：通过 OpenGL/Vulkan 命令由 GPU 执行实际绘制</li><li><strong>合成与显示</strong>：合成最终图像并显示到屏幕上</li></ol><h2 id="视图渲染基础" tabindex="-1"><a class="header-anchor" href="#视图渲染基础"><span>视图渲染基础</span></a></h2><h3 id="view-层次结构" tabindex="-1"><a class="header-anchor" href="#view-层次结构"><span>View 层次结构</span></a></h3><p>Android 的视图系统采用树形结构，每个视图都可以包含子视图，形成一个层次结构：</p>',4)),n(a,{id:"mermaid-49",code:"eJx9iz0OgjAARndP0YRVjALyN5jwJ6uD0YEwkFKkkVBSqsgtvIjH8h5CabCJiR3a9H3vXWjWlOAYLsBwvMSDDN8x64EKDiWp0RnXOelSoKo74CchgoSeMOpSrvscB0lAaoZqNg5DNz4xJbdmkgIuhcn79eTCRsbRjLUJRxzvv3gl/GmIpUEU/GpZXyHggQJXlasUTm5CY9kySq7IVdDa1C1LfNUO56x0teYhhb4IoZHDwpnDobKh9i8M5rBwoBQamb3Vf8MPhtlvUA=="}),s[5]||(s[5]=i("h3",{id:"视图绘制三个阶段",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#视图绘制三个阶段"},[i("span",null,"视图绘制三个阶段")])],-1)),s[6]||(s[6]=i("p",null,"Android 视图的绘制过程分为三个主要阶段：",-1)),n(a,{id:"mermaid-56",code:"eJwrTi0sTc1LTnXJTEwvSszlUgCCgsSikszkzILEvBKFsMzU8qD8/BKsEhiCzhmZOSlFqXlgCTAB069rZwdiWikUpBal5RflhhQllqUWFSfmFGtoghX65ZekKuQDxcBarBReNvY+7Wt7sbzt6ex9zxZMfLqn4enybriRcONyUxOLS4tSoYZApWDOsFLIz/OFKVB42TDp6d5Jz7Z2v2zvf7p2AsRoTBNzEivzS0twG+gDlYea93RH89ONDXjMSylKLMdlWkpmcUFiSXKGC1gN1MTnu2c87diGaiKB0Hm+e/KzufO5AEiMuQw="}),s[7]||(s[7]=l(`<h4 id="_1-测量阶段-measure" tabindex="-1"><a class="header-anchor" href="#_1-测量阶段-measure"><span>1. 测量阶段 (Measure)</span></a></h4><p>测量阶段确定视图的大小：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">protected</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> onMeasure</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> widthMeasureSpec</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> heightMeasureSpec</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 默认实现</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    setMeasuredDimension</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        getDefaultSize</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getSuggestedMinimumWidth</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> widthMeasureSpec</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        getDefaultSize</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getSuggestedMinimumHeight</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> heightMeasureSpec</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    );</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>MeasureSpec 是一个32位的整数，包括测量模式和大小：</p><ul><li><strong>EXACTLY</strong>：视图大小确定值，对应 <code>match_parent</code> 或具体尺寸</li><li><strong>AT_MOST</strong>：视图大小最大值，对应 <code>wrap_content</code></li><li><strong>UNSPECIFIED</strong>：视图无限制，通常在滚动容器中使用</li></ul><h4 id="_2-布局阶段-layout" tabindex="-1"><a class="header-anchor" href="#_2-布局阶段-layout"><span>2. 布局阶段 (Layout)</span></a></h4><p>布局阶段确定视图的位置：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">protected</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> onLayout</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">boolean</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> changed</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> left</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> top</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> right</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> bottom</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 默认实现为空，ViewGroup需要重写此方法安排子视图</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 例如线性布局的实现：</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        final</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> View</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> child</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getChildAt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">child</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getVisibility</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> !=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> GONE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            // 安排子视图位置</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            child</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">layout</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">childLeft</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> childTop</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> childRight</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> childBottom</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-绘制阶段-draw" tabindex="-1"><a class="header-anchor" href="#_3-绘制阶段-draw"><span>3. 绘制阶段 (Draw)</span></a></h4><p>绘制阶段将视图内容绘制到画布上：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> draw</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Canvas canvas</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 绘制背景</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    drawBackground</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">canvas</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 保存图层</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">saveCount </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        canvas</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">saveLayer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(...);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 绘制自身内容</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    onDraw</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">canvas</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 递归绘制子视图</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    dispatchDraw</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">canvas</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 绘制装饰（例如滚动条）</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    onDrawScrollBars</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">canvas</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 恢复图层</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">saveCount </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        canvas</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">restoreToCount</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">saveCount</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="硬件加速渲染" tabindex="-1"><a class="header-anchor" href="#硬件加速渲染"><span>硬件加速渲染</span></a></h2><h3 id="软件渲染-vs-硬件加速" tabindex="-1"><a class="header-anchor" href="#软件渲染-vs-硬件加速"><span>软件渲染 vs 硬件加速</span></a></h3>`,13)),n(a,{id:"mermaid-104",code:"eJxLL0osyFAIceFSAILi0iQI/8Xe9U92b3u2Y9Oz+ZPBMiDgaBgd6vl81/7nK7oVdBXCMlPL9VKKEstjFXR17RScDKOfT9n9tGODc0Do07bWp2tnPNmx9vmsFufEvLLE4li4IU6GYOXOhtFP+ye+bGgE6gguLUpLTE5FqHGGqHExjIZKueVk5qWnFj2d0PGsYwJEXWpeCphGdffzhWuA7n7ateBlw3yEu43wudso+tm8lqe7d7lkFhfkJFb6ZBaXILnWCOJao+ggoIWpRSEZRamJKc86l79Y2AMJHSRXQ9S6GEW7B4Q+3z3jacc2hKQLRNLViGgvlVTmpAKDXMfRSCEtMyfHSjnNMsUs2USnuKQoPzvVSjnVwMzY3BzK1S3PTCnJsDIqqEDS7GSoA3Q/RHOySUpymiVcM1CnRbIRPs3ORjpAN8M0p1kmI2k2SbQwNcan2cVQxxXh7DRjJGenJSUlG8C4SJoBnyngfQ=="}),s[8]||(s[8]=l('<h4 id="软件渲染" tabindex="-1"><a class="header-anchor" href="#软件渲染"><span>软件渲染</span></a></h4><p>在软件渲染模式下，Android 的绘制过程完全由 CPU 完成：</p><ul><li>所有绘制操作直接在内存中的位图上执行</li><li>每次重绘都需要重新计算整个视图树</li><li>资源消耗较大，性能有限</li></ul><h4 id="硬件加速" tabindex="-1"><a class="header-anchor" href="#硬件加速"><span>硬件加速</span></a></h4><p>硬件加速渲染由 GPU 完成绘制工作：</p><ul><li>将视图绘制操作转换为 GPU 可理解的指令</li><li>使用 DisplayList 缓存视图结构和绘制命令</li><li>只有更改的部分才会被重新绘制</li><li>提高渲染性能和动画流畅度</li></ul><h3 id="硬件加速渲染流程" tabindex="-1"><a class="header-anchor" href="#硬件加速渲染流程"><span>硬件加速渲染流程</span></a></h3>',7)),n(a,{id:"mermaid-159",code:"eJx10E1Kw0AUB/B9T5ELSPdddFUsgYKixv2QjjUYQ8zHwl1FSSMNJLUqxS6KEIkIQltUYqr1Mnkz7S2cNik2hs5iGOb/m8d7o+MzEysirkiooaHTAseWijRDEiUVKQYn8BzS2U6jH/rczsV7WKljbUGS08GxhlE9x6q7Qu6uIumqjM4Xb/dN7QiJeFuWlAbWlnK5CfxWuSzwJW4WWNCfkvf2vOXCjQPhJYyaWUJvB8T2iqT/Ru6Hae2apBt/KumwxIHnkNen/yRJ15l/RT2LhGMy6ELnO574WcdmYsjtzJsXOypWqrXioSmfIIU4rZVlZAXJdTB7dOikB/bHWpZ2wQqFAf3qgjUGJyKuF0dJhTTPSM9mg4L/EIcv6cdtoqQ3pX4E9hBGLnzeFX4BNLHLjg=="}),s[9]||(s[9]=i("h2",{id:"核心渲染组件",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#核心渲染组件"},[i("span",null,"核心渲染组件")])],-1)),s[10]||(s[10]=i("h3",{id:"viewrootimpl",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#viewrootimpl"},[i("span",null,"ViewRootImpl")])],-1)),s[11]||(s[11]=i("p",null,"ViewRootImpl 是视图层次结构与渲染系统的连接点：",-1)),n(a,{id:"mermaid-169",code:"eJydj7sOgjAUhnefoomrJEbwAoMJcklMHIwmOjQOeGihsVJSqsjbi+USJgbPcJLz/ecb/kRGeYoOpwmqx8UuKPZmqrohw9iiHT6mIiNXlsWivOmXnQ487BMQ8sJIi70aG8jHP3ISQu2fOW8SXycBPr8kjYA0MNAw7GDIWZYQ2WR6FariBLmIMs6dKbXjFVizQknxIM6UzFfmet2eRslilTqL/DMQvVYEKwZq92JtbWAxJvq9SG0YiFa0WZpjYvCvGPYdqTnoSO93mHfnQPwCoFKERw=="}),s[12]||(s[12]=l('<p>ViewRootImpl 的主要职责：</p><ul><li>作为 View 和 WindowManager 的中间人</li><li>协调视图绘制过程</li><li>处理输入事件分发</li><li>管理与 Surface 的交互</li></ul><p>关键方法：<code>performTraversals()</code> 协调测量、布局和绘制过程。</p><h3 id="rendernode-和-displaylist" tabindex="-1"><a class="header-anchor" href="#rendernode-和-displaylist"><span>RenderNode 和 DisplayList</span></a></h3>',4)),n(a,{id:"mermaid-201",code:"eJxLL0osyFAIceFSAALH6LDM1PJYBV1dOwWn6KDUvJTUIr/8lNRYsKwTWNw52iWzuCAnsdIns7gEIuEMlnCJfrpk1pMdq57t2PRs/uSnE/c+2b0EIu8CkTeMfr57xtOObc/nr3y6dxGKlBFU6tm09qdrp6NIGUOlns7e97yzHUXKJPrprinPp6x42j/jWS/UQDBRXFKZk6rgqJCWmZNjpZxmmWKWbKJTXFKUn51qpZxqYGZsbg7l6pZnppRkWBkVVCBpdIJqTDZJSU6zhGsE6rJINsKn0RmuMc0yGUmjSaKFqTGmRgDxmocY"}),s[13]||(s[13]=i("p",null,"在硬件加速渲染模型中：",-1)),s[14]||(s[14]=i("ul",null,[i("li",null,"每个 View 都有一个对应的 RenderNode"),i("li",null,"RenderNode 包含一个 DisplayList（渲染指令列表）"),i("li",null,"绘制命令被记录而不是立即执行"),i("li",null,"只有在视图内容变化时才需要重新记录")],-1)),s[15]||(s[15]=i("h3",{id:"renderthread",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#renderthread"},[i("span",null,"RenderThread")])],-1)),s[16]||(s[16]=i("p",null,"从 Android 5.0 开始，引入了专门的渲染线程（RenderThread）:",-1)),n(a,{id:"mermaid-233",code:"eJxLL0osyFAIceFSAALH6FDP57v2P1/RHaugq2tX82L99mcbm57t2PRs/uQaBafooNS8lNSikIyi1MSUWLAOJ7C6p0tank9oc8ksLshJrPTJLC6pUXCOdk7MK0ssds7PK0mtKIGodgar9i9IzXP3edbT/mT3khoFl2gIH2J2ahFEpQtY5fOFa57s3vZ894ynHdtqFFyj3QNCIdJgorikMidVwVEhLTMnx0o5zTLFLNlEp7ikKD871Uo51cDM2NwcytUtz0wpybAyKqhA0ugE1ZhskpKcZgnXCNRlkWyET6Ozjgtca5plMpJWk0QLU2N8Wl3hjk0zRnJsWlJSsgGMi6QRAD6HkZI="}),s[17]||(s[17]=i("p",null,"RenderThread 的优势：",-1)),s[18]||(s[18]=i("ul",null,[i("li",null,"解耦 UI 线程和实际渲染过程"),i("li",null,"允许 UI 线程在提交渲染工作后立即处理下一帧"),i("li",null,"即使 UI 线程被阻塞，动画也能继续执行"),i("li",null,"提高渲染性能和界面流畅度")],-1)),s[19]||(s[19]=i("h3",{id:"surface-和-surfaceflinger",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#surface-和-surfaceflinger"},[i("span",null,"Surface 和 SurfaceFlinger")])],-1)),n(a,{id:"mermaid-262",code:"eJxLL0osyFAIceFSAALH6KdLZj3ZserprinPp6yIVdDVtVNwNIx2LChQMFQILi1KS0xOjYWohMgZgeWMsMoZRwdXFpek5oZ6okkbguWdoqGibjmZeempRVBJI4gkhGOMxHECsWueL1zzZPe2pxM6nnVMqFFwjn42Y9/zJbuebuyHaAcTxSWVOalAV6Rl5uRYKadZppglm+gUlxTlZ6daKacamBmbm0O5uuWZKSUZVkYFFcgaDXUcjXSAdkP0J5ukJKdZwvUDNVskG+HT7wTXmGaZjKTRJNHC1BifRme4i9OMkVyclpSUbADjImkEAC+qjX0="}),s[20]||(s[20]=i("ul",null,[i("li",null,[i("strong",null,"Surface"),e("：一个可绘制的缓冲区，每个窗口都有一个 Surface")]),i("li",null,[i("strong",null,"SurfaceFlinger"),e("：系统服务，负责将多个 Surface 合成显示到屏幕")])],-1)),s[21]||(s[21]=i("h2",{id:"渲染流水线详解",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#渲染流水线详解"},[i("span",null,"渲染流水线详解")])],-1)),s[22]||(s[22]=i("h3",{id:"垂直同步与刷新率",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#垂直同步与刷新率"},[i("span",null,"垂直同步与刷新率")])],-1)),n(a,{id:"mermaid-281",code:"eJxl0c9KwzAcB/C7T5EX8AV6GAijJ28F76HUEZiltt1ht4qz25zYSivKJoxBx3oqbiCWqt3DuF/SvYVtWtmf5hCS/D7w/SUxlOuOospKk+CWjq9OUD40rJtEJhpWTdQkhtbGXYQNRF9TFiSwdGroQuqqckH4YrOegfNZQ2eaVhBIfOaH2XrCwlHNSGJBpI5+iWVFbBO1pegc8anq5bTR4DkCAucJ+slxKN/nKA8U0NYas+m8DIWgx1wb4gVnefkflYUs9eBuXqvdh8z/yqIZi16Oa9nChklKP0bbvvNr3UB8C0urhqJ3+Hmuej8nhrkHJFFA1HE3SUDjFZ167NsDewUPycFFClXe4/BlwB3QgcupJFauPKNDi74NK70DVRN5ZvmV3IL7yMa94lX+AMoS44A="}),s[23]||(s[23]=l(`<p>垂直同步（VSync）是确保渲染流畅的关键机制：</p><ul><li>显示器按固定频率刷新（如 60Hz）</li><li>VSync 信号同步应用渲染和屏幕刷新</li><li>避免屏幕撕裂和丢帧现象</li></ul><h3 id="choreographer" tabindex="-1"><a class="header-anchor" href="#choreographer"><span>Choreographer</span></a></h3><p>Choreographer 是协调渲染时机的核心组件：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">private</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> scheduleFrameLocked</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">long</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> now</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">mFrameScheduled</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 向显示子系统注册接收下一个VSync信号</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    mFrameScheduled </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    mLastFrameTimeNanos </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">nanoTime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    mDisplayEventReceiver</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">scheduleVsync</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">private</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> doFrame</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">long</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> frameTimeNanos</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 处理输入事件</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    doCallbacks</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Choreographer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">CALLBACK_INPUT</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> frameTimeNanos</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 处理动画</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    doCallbacks</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Choreographer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">CALLBACK_ANIMATION</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> frameTimeNanos</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 处理遍历</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    doCallbacks</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Choreographer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">CALLBACK_TRAVERSAL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> frameTimeNanos</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 处理提交</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    doCallbacks</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Choreographer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">CALLBACK_COMMIT</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> frameTimeNanos</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Choreographer 负责：</p><ul><li>接收 VSync 信号</li><li>按优先级顺序安排各种回调</li><li>确保视图更新在合适的时机进行</li></ul><h3 id="triple-buffering" tabindex="-1"><a class="header-anchor" href="#triple-buffering"><span>Triple Buffering</span></a></h3>`,8)),n(a,{id:"mermaid-332",code:"eJxLL0osyFAIceFSAALH6FDP57v2P1/RHaugq2un4BT9dELf0/4Nz/dMftq26WnPrliwMiewpHP0kx1rX07fgibpDJZ0iX7a2Yup0wUs6Rr9bMa+50t2PZ25AiIMJopLKnNSFRwV0jJzcqyU0yxTzJJNdIpLivKzU62UUw3MjM3NoVzd8syUkgwro4IKJI1OOs5QrckmKclplnCtQH0WyUb4tLrANaZZJiNpNEm0MDXGp9EV7tg0YyTHpiUlJRvAuEgaAZItg8M="}),s[24]||(s[24]=l('<p>为了提高渲染性能，Android 采用多缓冲机制：</p><ul><li>前台缓冲区（Front Buffer）：当前显示的内容</li><li>后台缓冲区（Back Buffer）：正在准备的下一帧</li><li>中间缓冲区：额外的缓冲区，减少等待</li></ul><p>多缓冲可以提高界面流畅度，但会增加内存使用和显示延迟。</p><h2 id="常见性能问题及优化" tabindex="-1"><a class="header-anchor" href="#常见性能问题及优化"><span>常见性能问题及优化</span></a></h2><h3 id="过度绘制" tabindex="-1"><a class="header-anchor" href="#过度绘制"><span>过度绘制</span></a></h3><p>过度绘制（Overdraw）是指同一个像素被多次绘制的情况：</p>',6)),n(a,{id:"mermaid-365",code:"eJxLL0osyFAIceFSAALH6BfL257O3vd0Y9PzXctjFXR17RScop9NX/Bif/vTXcue757xtGNbLEQpWNI52rACl5xLtBFOOddoY5xybtEmWOTARHFJZU4qUFlaZk6OlXKaZYpZsolOcUlRfnaqlXKqgZmxuTmUq1uemVKSYWVUUIGk0Qmq0Q0M4BoNwACfRmeoRktXV3OSNLpANZq4uBiRpNEVqtHAwNHQxZUEjW5wjQYGRNgIAFrms5Y="}),s[25]||(s[25]=l('<p>减少过度绘制的方法：</p><ul><li>移除不必要的背景</li><li>减少视图层级嵌套</li><li>使用 <code>clipRect()</code> 和 <code>quickReject()</code> 避免绘制不可见区域</li><li>使用 <code>setLayerType()</code> 合理设置图层类型</li></ul><h3 id="布局优化" tabindex="-1"><a class="header-anchor" href="#布局优化"><span>布局优化</span></a></h3>',3)),n(a,{id:"mermaid-394",code:"eJxLL0osyFAIceFSAALH6Kc7mp9ubHiyZ8bTnmmxCrq6dgpO0U/b+59umPh0Y9PzXcufbu15unR6LEQ1WN45+sne/c+nrHDOzysuKUrMzCvxSazMLy1BVuMCNSMzLy0nsST12fRtL6dvQVbgCjUkLDO1PLikNOlZ+6SnXQte7N0LUQQmiksqc1KB6tMyc3KslJNNUpLTLHWAVuZnp1opG5ubWyQbQbm65ZkpJRlWRgUVXAARpFq8"}),s[26]||(s[26]=l('<p>布局优化关键点：</p><ul><li>使用 Hierarchy Viewer 和 Layout Inspector 分析视图层级</li><li>使用 <code>&lt;merge&gt;</code> 标签合并布局层级</li><li>使用 <code>&lt;include&gt;</code> 复用布局</li><li>使用 ViewStub 延迟加载不常用视图</li><li>使用 ConstraintLayout 创建扁平布局</li></ul><h3 id="离屏缓冲" tabindex="-1"><a class="header-anchor" href="#离屏缓冲"><span>离屏缓冲</span></a></h3>',3)),n(a,{id:"mermaid-428",code:"eJxLL0osyFAIceFSAALH6Kd9858u736+e8bTjm2xCrq6dgpO1S/nNLxY1vi8c+ezqR32tWCFTiCpmmcz1tcoOEc/X7b76cb+53smP23bFAuWdgbrdIl+tmPTs/mTn3ZseL5r5/MJbRBJF7Cka/TTXVOeT1kBMRYi4wqWcYt+OqHjWccEoDagsU93ToVIQqx8OmFZjYIbWABMFJdU5qQqOCqkZebkWCmnWaaYJZvoFJcU5WenWimnGpgZm5tDubrlmSklGVZGBRVIGp2hGpNNUpLTLOEagbosko3waXTRcYVrTbNMRtJqkmhhaoxPqxvcsWnGSI5NS0pKNoBxkTQCAFOlmmU="}),s[27]||(s[27]=l(`<p>离屏缓冲（Off-screen Rendering）是指在非显示缓冲区中进行绘制：</p><ul><li>用于实现复杂视觉效果（如阴影、模糊、动画）</li><li>可能导致性能下降，特别是在低端设备上</li><li>应用透明度、旋转、动画等效果时会触发</li></ul><p>优化离屏缓冲：</p><ul><li>减少半透明层叠</li><li>避免设置多个复杂的图层特效</li><li>使用 <code>setLayerType(LAYER_TYPE_HARDWARE)</code> 合理设置图层渲染类型</li></ul><h3 id="自定义-view-优化" tabindex="-1"><a class="header-anchor" href="#自定义-view-优化"><span>自定义 View 优化</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> EfficientCustomView</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> View</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 减少对象分配</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> final</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Paint</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> mPaint</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Paint</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> final</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Rect</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> mBounds</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Rect</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Override</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    protected</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> onDraw</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Canvas </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">canvas</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 1. 避免在onDraw中创建对象</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 错误: Paint paint = new Paint();</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 2. 使用canvas的裁剪方法减少绘制区域</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        canvas</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">clipRect</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">mBounds</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 3. 仅绘制可见部分</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">canvas</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">quickReject</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">mBounds</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Canvas</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">EdgeType</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">AA</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            // 执行绘制</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 4. 使用硬件加速特性</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">canvas</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">isHardwareAccelerated</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">())</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            // 利用硬件加速特性优化绘制</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 5. 仅在必要时调用invalidate</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> updateAndInvalidateOnlyIfNeeded</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">contentChanged</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            // 计算需要重绘的区域</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            invalidate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">dirtyRect</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            // 不要用 invalidate() 重绘整个视图</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="新一代图形渲染技术" tabindex="-1"><a class="header-anchor" href="#新一代图形渲染技术"><span>新一代图形渲染技术</span></a></h2><h3 id="compose-渲染模型" tabindex="-1"><a class="header-anchor" href="#compose-渲染模型"><span>Compose 渲染模型</span></a></h3><p>Jetpack Compose 采用了全新的声明式 UI 模型和渲染机制：</p>`,9)),n(a,{id:"mermaid-482",code:"eJxLL0osyFAIceFSAALHaOf83IL84tSn7XufTd0Qq6Cra6fgBBXMLMnMz4sFq3MCSzhHP93R/HRjA0TMGSzmEv1894ynHdvg6vR07Wqed2171tD4tH/G055pNQpOYCkwUVxSmZOq4KiQlpmTY6WcZplilmyiU1xSlJ+daqWcamBmbG4O5eqWZ6aUZFgZFVQgaXSCakw2SUlOs4RrBOqySDbCp9EZrjHNMhlJo0mihakxPo0ucKemGSM5NS0pKdkAxkXSCAD0U3Qx"}),s[28]||(s[28]=i("p",null,"Compose 的渲染特点：",-1)),s[29]||(s[29]=i("ul",null,[i("li",null,"声明式 UI，无需直接操作视图树"),i("li",null,"高效的增量重组（只更新变化的部分）"),i("li",null,"内置动画和过渡效果"),i("li",null,"仍然基于 Android 的硬件加速渲染系统")],-1)),s[30]||(s[30]=i("h3",{id:"vulkan",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#vulkan"},[i("span",null,"Vulkan")])],-1)),n(a,{id:"mermaid-511",code:"eJxLL0osyFDwCeJSAALHaMe8lKL8zJSnu6Y8n7IiVkFX107BKdqtKDE3tTy/KDsWrMoJLOxc/XT2vqd7FzkGeNaChZ1BwjVP9ix4vnt+jYJLtH9Bap67j4JrMEQXRPp534YnuxfXKLhGh5XmZCfmQeRcwCa6RbsHhEIEXCECYDaYKC6pzElVcFRIy8zJsVJOs0wxSzbRKS4pys9OtVJONTAzNjeHcnXLM1NKMqyMCiqQNDpDNSabpCSnWcI1AnVZJBvh0+ii4wrXmmaZjKTVJNHC1BifVje4Y9OMkRyblpSUbADjImkEABpHfdQ="}),s[31]||(s[31]=l(`<p>Vulkan 是新一代低开销图形 API：</p><ul><li>更低的 CPU 开销</li><li>更好的多线程支持</li><li>更精细的控制</li><li>用于游戏和高性能图形应用</li><li>从 Android 7.0 开始支持</li></ul><h2 id="调试与分析工具" tabindex="-1"><a class="header-anchor" href="#调试与分析工具"><span>调试与分析工具</span></a></h2><h3 id="profile-gpu-rendering" tabindex="-1"><a class="header-anchor" href="#profile-gpu-rendering"><span>Profile GPU Rendering</span></a></h3><p>通过 <code>adb shell dumpsys gfxinfo</code> 可以获取帧渲染信息：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 查看指定应用的帧信息</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">adb</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> shell</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> dumpsys</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> gfxinfo</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> com.example.app</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在开发者选项中开启 &quot;Profile GPU Rendering&quot; 可以直观地查看渲染性能：</p><ul><li>绿色：测量和布局时间</li><li>蓝色：绘制操作执行时间</li><li>紫色：GPU 处理时间</li><li>橙色：交换缓冲区时间</li></ul><h3 id="systrace" tabindex="-1"><a class="header-anchor" href="#systrace"><span>Systrace</span></a></h3><p>Systrace 工具可以深入分析系统性能，包括渲染：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 收集渲染相关的性能数据</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">python</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> systrace.py</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -b</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10000</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -o</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> trace.html</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> gfx</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> view</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> res</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> sched</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Systrace 提供：</p><ul><li>精确的时间线图表</li><li>CPU 使用情况</li><li>帧渲染细节</li><li>UI 线程和渲染线程活动</li></ul><h3 id="layout-inspector" tabindex="-1"><a class="header-anchor" href="#layout-inspector"><span>Layout Inspector</span></a></h3><p>Layout Inspector 可以在运行时检查应用的视图层次：</p><ul><li>可视化视图层级</li><li>查看各个视图的属性</li><li>分析布局性能问题</li><li>识别过度绘制区域</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>Android 的 UI 渲染机制是一个复杂的多阶段过程，从视图的测量、布局和绘制，到硬件加速渲染和最终显示，每个环节都至关重要。理解这些机制不仅有助于开发高性能的应用界面，还能帮助诊断和解决渲染相关的问题。</p><p>渲染性能优化的关键点：</p><ol><li>减少视图层级和过度绘制</li><li>优化布局结构和绘制操作</li><li>合理使用硬件加速特性</li><li>避免在 UI 线程进行耗时操作</li><li>使用专业工具分析和优化渲染性能</li></ol><p>随着 Android 渲染技术的不断发展，特别是 Jetpack Compose 和 Vulkan 等新技术的引入，UI 渲染的效率和灵活性将进一步提高，为用户带来更流畅、更丰富的交互体验。</p><hr><h2 id="参考资源" tabindex="-1"><a class="header-anchor" href="#参考资源"><span>参考资源</span></a></h2><ul><li><a href="https://developer.android.com/topic/performance/rendering" target="_blank" rel="noopener noreferrer">Android 开发者文档 - 渲染</a></li><li><a href="https://source.android.com/devices/graphics" target="_blank" rel="noopener noreferrer">Android 图形渲染原理</a></li><li>《Android 开发艺术探索》第 3 章 View 的工作原理</li><li>《深入理解 Android 内核设计思想》第 10 章 图形显示系统</li></ul>`,24))])}const c=h(d,[["render",r],["__file","index.html.vue"]]),y=JSON.parse('{"path":"/android/sr6zxlql/","title":"UI渲染机制","lang":"zh-CN","frontmatter":{"title":"UI渲染机制","createTime":"2025/04/29 14:32:19","permalink":"/android/sr6zxlql/"},"headers":[],"readingTime":{"minutes":11.86,"words":3559},"git":{"updatedTime":1745914733000,"contributors":[{"name":"Henry Thomas","username":"Henry Thomas","email":"henrythomas9587@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/Henry Thomas?v=4","url":"https://github.com/Henry Thomas"}]},"filePathRelative":"notes/android/framework/03/UI渲染机制.md","bulletin":false}');export{c as comp,y as data};
